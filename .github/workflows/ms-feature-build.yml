name: MS - feature build

on:
  issue_comment:
    types:
      - created

jobs:
  prepare-pr-build:
    runs-on: ubuntu-latest

    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, 'build') }}

    outputs:
      microservice-name: ${{ steps.parse-ms-name.outputs.ms-name }}

    steps:
      - name: Parse microservice name
        id: parse-ms-name
        run: echo "::set-output name=ms-name::ordering"
      - name: Mark comment
        uses: actions/github-script@v4
        with:
          script: |
            const {owner, repo} = context.issue
            github.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "+1",
            });

  build:
    runs-on: ubuntu-latest
    needs: prepare-pr-build

    steps:
      - name: Get PR SHA
        id: sha
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.pulls.get({
              owner,
              repo,
              pull_number: number,
            });
            return pr.data.head.sha

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.sha.outputs.result }}

      - name: Share status
        uses: actions/github-script@v4
        with:
          script: |
            const {owner, repo} = context.issue
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Build ${{ needs.prepare-pr-build.outputs.microservice-name }} completed',
            });

  share-results:
    runs-on: ubuntu-latest
    needs: [prepare-pr-build, build]

    steps:
      - name: Share status
        uses: actions/github-script@v4
        with:
          script: |
            const {owner, repo} = context.issue
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Build ${{ needs.prepare-pr-build.outputs.microservice-name }} completed',
            });
